# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Area {
  address: String!
  code: String!
  createdAt: String!
  deletedAt: String!
  description: String!
  employee: Employee!
  employeeID: String!
  farm: Farm!
  farmID: String!
  id: String!
  latitude: String!
  location: Location!
  locationID: String!
  longitude: String!
  mediaAbles: [MediaAble!]!
  name: String!
  productObjects: [ProductObject!]!
  productObjectsTotal: Float!
  sections: [Section!]!
  status: Float!

  """
  0: field area, 1: farming area, 2: production area, 3: field & product area, 4: field & production area, 5: others
  """
  type: Float!
  updatedAt: String!
}

type AreaPaginateResponse {
  data: [Area!]!
  pagination: PaginationInfo!
}

type Category {
  code: String!
  createdAt: String!
  id: String!
  name: String!
  note: String!
  subCategories: [SubCategory!]!
  url: String!
  urlThumbnail: String!
}

type Certification {
  certificationAbles: CertificationAble!
  code: String!
  createdAt: String!
  id: String!
  logo: String!
  name: String!
}

type CertificationAble {
  certification: Certification!
  createdAt: String!
  description: String!
  effectiveAt: String!
  id: String!
  organization: Organization!
  urls: [String!]!
}

type CertificationPaginateResponse {
  data: [Certification!]!
  pagination: PaginationInfo!
}

type Diary {
  createdAt: String!
  description: String!
  hash: DiaryHash
  id: String!

  """must query with "hash" relation"""
  isVerified: Boolean!
  name: String!
  section: Section!
  sectionID: String!
  step: Step!
  stepID: String!
  urls: [String!]!
}

type DiaryHash {
  diary: Diary!
  diaryId: String!
  hash: String!
  height: Float!
}

type DiaryPaginateResponse {
  data: [Diary!]!
  pagination: PaginationInfo!
}

type Employee {
  areas: [Area!]!
  avatar: String!
  code: String!
  createdAt: String!
  deletedAt: String!
  farm: Farm!
  farmID: String!
  id: String!
  isVerifiedPhoneNumber: Boolean!
  name: String!
  phoneNumber: String!

  """0: employee, 1: farmer, 2: manager"""
  role: Float!
  status: Float!
  updatedAt: String!
}

type Farm {
  address: String!
  areas: [Area!]!
  banner: String!
  certificationAbles: [CertificationAble!]!
  code: String!
  createdAt: String!
  deletedAt: String!
  description: String!
  email: String!
  employees: [Employee!]!
  farmCategories: [FarmCategory!]!
  farmPayments: [FarmPayment!]!
  id: String!
  isVerifiedEmail: Boolean!
  isVerifiedPhoneNumber: Boolean!
  latitude: String!
  location: Location!
  logo: String!
  longitude: String!
  mediaAbles: [MediaAble!]!
  name: String!
  phoneNumber: String!
  processes: [Process!]!
  products: [Product!]!
  productsTotal: Float!
  status: Float!
  updatedAt: String!
  website: String!
}

type FarmCategory {
  category: Category!
  categoryID: String!
  farm: Farm!
  farmID: String!
  id: String!
}

type FarmPaginateResponse {
  data: [Farm!]!
  pagination: PaginationInfo!
}

type FarmPayment {
  accountNo: String!
  createdAt: String!
  deletedAt: String!
  expiredAt: String!
  farm: Farm!
  farmID: String!
  id: String!
  provider: String!
  status: Float!

  """0: banking card, 1: credit card, 2: debit card"""
  type: Float!
  updatedAt: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Location {
  areas: [Area!]!
  createdAt: String!
  deletedAt: String!
  district: String!
  districtCode: String!
  farms: [Farm!]!
  id: String!
  products: [Product!]!
  province: String!
  provinceCode: String!
  status: Float!
  updatedAt: String!
}

type LocationPaginateResponse {
  data: [Location!]!
  pagination: PaginationInfo!
}

type Media {
  createdAt: String!
  id: String!
  type: Float!
  url: String!
  urlThumbnail: String!
}

type MediaAble {
  id: String!
  media: Media!
  mediaID: String!
  targetID: String!
  targetType: TargetType!
  targetTypeID: String!
}

type Organization {
  certificationAbles: [CertificationAble!]!
  description: String!
  id: String!
  logo: String!
  name: String!
}

type OrganizationPaginateResponse {
  data: [Organization!]!
  pagination: PaginationInfo!
}

type PaginationInfo {
  current: Int!
  next: Int!
  prev: Int!
  take: Int!
  total: Int!
  totalPage: Int!
}

type Process {
  code: String!
  createdAt: String!
  deletedAt: String!
  farm: Farm!
  farmID: String!
  id: String!
  isHaveStep: Boolean!
  name: String!
  productObjects: [ProductObject!]!
  productObjectsTotal: Float!
  quantity: Float!
  sections: [Section!]!
  status: Float!
  steps: [Step!]!
  updatedAt: String!
}

type ProcessPaginateResponse {
  data: [Process!]!
  pagination: PaginationInfo!
}

type Product {
  address: String!
  banner: String!
  barcode: String!
  brandDescription: String!
  brandName: String!
  certificationAbles: [CertificationAble!]!
  code: String!
  createdAt: String!
  deletedAt: String!
  description: String!
  duration: Float!

  """0: day, 1: week, 2: month, 3: year"""
  durationType: Float!
  email: String!
  farm: Farm!
  farmID: String!
  id: String!
  isHaveBrand: Boolean!
  latitude: String!
  location: Location!
  logo: String!
  longitude: String!
  mediaAbles: [MediaAble!]!
  name: String!
  phoneNumber: String!
  price: Float!
  productObjects: [ProductObject!]!
  productObjectsTotal: Float!
  status: Float!
  subCategory: SubCategory!
  subCategoryID: String!
  taxCode: String!

  """0: item, 1: kilogram, 2: others"""
  unit: Float!
  updatedAt: String!
  website: String!
}

type ProductObject {
  area: Area!
  areaID: String!
  code: String!
  createdAt: String!
  deletedAt: String!
  description: String!
  id: String!
  mediaAbles: [MediaAble!]!
  name: String!

  """0: tree, 1: bed, 2: all, 3: farm, 4: closed farm, 5: others"""
  objectType: Float!
  process: Process!
  processID: String!
  product: Product!
  productID: String!
  sections: [Section!]!
  status: Float!

  """0: field plant, 1: farming plant, 2: production plant"""
  type: Float!
  updatedAt: String!
}

type ProductPaginateResponse {
  data: [Product!]!
  pagination: PaginationInfo!
}

type Query {
  area(id: String!): Area!
  areas(order: JSONObject, page: Float!, search: String, skip: Float!, take: Float!, type: Float!, where: JSONObject): AreaPaginateResponse!
  certification(id: String!): Certification!
  certifications(order: JSONObject, page: Float!, search: String, skip: Float!, take: Float!, type: Float!, where: JSONObject): CertificationPaginateResponse!
  diaries(order: JSONObject, page: Float!, search: String, skip: Float!, take: Float!, type: Float!, where: JSONObject): DiaryPaginateResponse!
  diary(id: String!): Diary!
  farm(id: String!): Farm!
  farms(order: JSONObject, page: Float!, search: String, skip: Float!, take: Float!, type: Float!, where: JSONObject): FarmPaginateResponse!
  location(id: String!): Location!
  locations(order: JSONObject, page: Float!, search: String, skip: Float!, take: Float!, type: Float!, where: JSONObject): LocationPaginateResponse!
  organization(id: String!): Organization!
  organizations(order: JSONObject, page: Float!, search: String, skip: Float!, take: Float!, type: Float!, where: JSONObject): OrganizationPaginateResponse!
  process(id: String!): Process!
  processes(order: JSONObject, page: Float!, search: String, skip: Float!, take: Float!, type: Float!, where: JSONObject): ProcessPaginateResponse!
  product(id: String!): Product!
  products(order: JSONObject, page: Float!, search: String, skip: Float!, take: Float!, type: Float!, where: JSONObject): ProductPaginateResponse!
  section(id: String!): Section!
  sections(order: JSONObject, page: Float!, search: String, skip: Float!, take: Float!, type: Float!, where: JSONObject): SectionPaginateResponse!
  step(id: String!): Step!
  steps(order: JSONObject, page: Float!, search: String, skip: Float!, take: Float!, type: Float!, where: JSONObject): StepPaginateResponse!
}

type Section {
  area: Area!
  areaID: String!
  code: String!
  createdAt: String!
  diaries: [Diary!]!
  diariesTotal: Float!
  id: String!
  name: String!
  process: Process!
  processID: String!
  productObject: ProductObject!
  productObjectID: String!
  status: Float!

  """0: season, 1: batch"""
  type: Float!
}

type SectionPaginateResponse {
  data: [Section!]!
  pagination: PaginationInfo!
}

type Step {
  description: String!
  diaries: [Diary!]!
  diariesTotal: Float!
  id: String!
  isInternal: Boolean!
  name: String!
  order: Int!
  process: Process!
  processID: String!
  stepProperties: [StepProperty!]!
}

type StepPaginateResponse {
  data: [Step!]!
  pagination: PaginationInfo!
}

type StepProperty {
  id: String!
  isRequired: Boolean!
  name: String!
  stepID: String!

  """0: text, 1: number, 2: link"""
  type: Float!
  value: String!
}

type SubCategory {
  category: Category!
  categoryID: String!
  code: String!
  createdAt: String!
  id: String!
  name: String!
  note: String!
  products: [Product!]!
  url: String!
  urlThumbnail: String!
}

type TargetType {
  id: String!
  name: String!
}
